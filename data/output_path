{"name": "1291_E. Prefix Enlightenment", "description": "Input\n\nThe first line contains two integers n and k (1 <= n, k <= 3 * 10^5).\n\nThe second line contains a binary string of length n, representing the initial state of each lamp (the lamp i is off if s_i = 0, on if s_i = 1).\n\nThe description of each one of the k subsets follows, in the following format:\n\nThe first line of the description contains a single integer c (1 <= c <= n) --- the number of elements in the subset.\n\nThe second line of the description contains c distinct integers x_1, ..., x_c (1 <= x_i <= n) --- the elements of the subset.\n\nIt is guaranteed that: \n\n  * The intersection of any three subsets is empty; \n  * It's possible to make all lamps be simultaneously on using some operations.", "grammar": {"productions": ["<S>->[n] <s> [k] <n> [01]{n} <n> <T_k>", "<T_i>-><T_i-1> <n> [c] <n> <L_c>", "<T_1>->[c] <n> <L_c>", "<L_i>-><L_i-1> <s> x_i", "<L_1>->x_1"], "constraints": ["1<=n,k<=3*10^5", "1<=c<=n", "1<=x_i<=n"]}}
{"name": "143_A. Help Vasilisa the Wise 2", "description": "Input\n\nThe input contains numbers written on the edges of the lock of the box. The first line contains space-separated integers r1 and r2 that define the required sums of numbers in the rows of the square. The second line contains space-separated integers c1 and c2 that define the required sums of numbers in the columns of the square. The third line contains space-separated integers d1 and d2 that define the required sums of numbers on the main and on the side diagonals of the square (1 <= r1, r2, c1, c2, d1, d2 <= 20). Correspondence between the above 6 variables and places where they are written is shown on the picture below. For more clarifications please look at the second sample test that demonstrates the example given in the problem statement.\n\n<image>", "grammar": {"productions": ["<S>->r1 <s> r2 <n> c1 <s> c2 <n> d1 <s> d2"], "constraints": ["1<=r1,r2,c1,c2,d1,d2<=20"]}}
{"name": "1466_F. Euclid's nightmare", "description": "Input\n\nIn the first line of input, there are two integers n, m (1 <= n, m <= 5 * 10^5) denoting the number of vectors in S and the number of dimensions. \n\nNext n lines contain the description of the vectors in S. In each of them there is an integer k (1 <= k <= 2) and then follow k distinct integers x_1, ... x_k (1 <= x_i <= m). This encodes an m-dimensional vector having 1s on coordinates x_1, ... x_k and 0s on the rest of them.\n\nAmong the n vectors, no two are the same.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n>", "<T_i>-><T_i-1> <n> [k] <s> <L_k>", "<T_1>->[k] <s> <L_k>", "<L_i>-><L_i-1> <s> x_i", "<L_1>->x_1"], "constraints": ["1<=n,m<=5*10^5", "1<=k<=2", "1<=x_i<=m"]}}
{"name": "1490_G. Old Floppy Drive ", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 10^4) --- the number of test cases. Then t test cases follow.\n\nThe first line of each test case consists of two positive integers n, m (1 <= n, m <= 2 * 10^5) --- the number of numbers on the disk and the number of asked questions.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (-10^9 <= a_i <= 10^9).\n\nThe third line of each test case contains m positive integers x_1, x_2, ..., x_m (1 <= x <= 10^9).\n\nIt is guaranteed that the sums of n and m over all test cases do not exceed 2 * 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> [m] <n> <L_n> <n> <Z_m>", "<T_1>->[n] <s> [m] <n> <L_n> <n> <Z_m>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_i", "<Z_i>-><Z_i-1> <s> x_i", "<Z_1>->x_i"], "constraints": ["1<=t<=10^4", "1<=n,m<=2*10^5", "-10^9<=a_i<=10^9", "1<=x_i<=10^9"]}}
{"name": "168_A. Wizards and Demonstration", "description": "Input\n\nThe first line contains three space-separated integers, n, x, y (1 <= n, x, y <= 104, x <= n) --- the number of citizens in the city, the number of wizards and the percentage the administration needs, correspondingly.\n\nPlease note that y can exceed 100 percent, that is, the administration wants to see on a demonstration more people that actually live in the city ( > n).", "grammar": {"productions": ["<S>->n <s> x <s> y"], "constraints": ["1<=n,x,y<=10^4", "x<=n", "y>n"]}}
{"name": "284_B. Cows and Poker Game", "description": "Input\n\nThe first line contains a single integer, n (2 <= n <= 2·105). The second line contains n characters, each either \"A\", \"I\", or \"F\". The i-th character is \"A\" if the i-th player's status is \"ALLIN\", \"I\" if the i-th player's status is \"IN\", or \"F\" if the i-th player's status is \"FOLDED\".", "grammar": {"productions": ["<S>->[n] <n> [AIF]{n}"], "constraints": ["2<=n<=200000"]}}
{"name": "39_H. Multiplication Table", "description": "Input\n\nThe first line contains a single integer k (2 <= k <= 10) --- the radix of the system.", "grammar": {"productions": ["<S>->k"], "constraints": ["2<=k<=10"]}}
{"name": "44_B. Cola", "description": "Input\n\nThe first line contains four integers --- n, a, b, c (1 <= n <= 10000, 0 <= a, b, c <= 5000).", "grammar": {"productions": ["<S>->n <s> a <s> b <s> c"], "constraints": ["1<=n<=10000", "0<=a<=5000", "0<=b<=5000", "0<=c<=5000"]}}
{"name": "545_C. Woodcutters", "description": "Input\n\nThe first line contains integer n (1 <= n <= 105) --- the number of trees.\n\nNext n lines contain pairs of integers xi, hi (1 <= xi, hi <= 109) --- the coordinate and the height of the і-th tree.\n\nThe pairs are given in the order of ascending xi. No two trees are located at the point with the same coordinate.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> xi <s> hi", "<T_1>->xi <s> hi"], "constraints": ["1<=n<=10^5", "1<=xi,hi<=10^9"]}}
{"name": "730_J. Bottles", "description": "Input\n\nThe first line contains positive integer n (1 <= n <= 100) --- the number of bottles.\n\nThe second line contains n positive integers a1, a2, ..., an (1 <= ai <= 100), where ai is the amount of soda remaining in the i-th bottle.\n\nThe third line contains n positive integers b1, b2, ..., bn (1 <= bi <= 100), where bi is the volume of the i-th bottle.\n\nIt is guaranteed that ai <= bi for any i.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> <L_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["1<=n<=100", "1<=a_i<=100", "1<=b_i<=100", "a_i<=b_i"]}}
{"name": "868_A. Bark to Unlock", "description": "Input\n\nThe first line contains two lowercase English letters --- the password on the phone.\n\nThe second line contains single integer n (1 <= n <= 100) --- the number of words Kashtanka knows.\n\nThe next n lines contain two lowercase English letters each, representing the words Kashtanka knows. The words are guaranteed to be distinct.", "grammar": {"productions": ["<S>->[a-z]{2} <n> [n] <n> <T_n>", "<T_i>-><T_i-1> <n> [a-z]{2}", "<T_1>->[a-z]{2}"], "constraints": ["1<=n<=100"]}}
{"name": "893_D. Credit Card", "description": "Input\n\nThe first line contains two integers n, d (1 <= n <= 105, 1 <= d <= 109) ---the number of days and the money limitation.\n\nThe second line contains n integer numbers a1, a2, ... an ( - 104 <= ai <= 104), where ai represents the transaction in i-th day.", "grammar": {"productions": ["<S>->[n] <s> d <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=10^5", "1<=d<=10^9", "-10^4<=a_i<=10^4"]}}
{"name": "p03153 KEYENCE Programming Contest 2019 - Connecting Cities", "description": "Constraints\n\n* 1 <= N <= 2 * 10^5\n* 1 <= D <= 10^9\n* 1 <= A_{i} <= 10^9\n* A_{i} and D are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN D\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <s> D <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=2*10^5", "1<=D<=10^9", "1<=A_i<=10^9"]}}
{"name": "p00323 Metal Recycling", "description": "Input\n\nThe input is given in the following format.\n\n\nN\na1 b1\na2 b2\n::\naN bN\n\n\nThe first line gives the number of recovery vehicles N (1 <= N <= 100000). In the next N lines, the integer ai (0 <= ai <= 100000) representing the weight in \"Bocco\" units and the integer bi (0 <= bi <=) representing the number in \"Margue\" units of the mass of Aidunium collected by the recovery vehicle i. 100000) is given.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["1<=N<=100000", "0<=a_i<=100000", "0<=b_i<=100000"]}}
{"name": "p01356 Nearest Station", "description": "Input\n\n1 <= n, m, a, b, p, q <= 1 000 000 000 000 (integer)", "grammar": {"productions": ["<S>->n <s> m <s> a <s> b <s> p <s> q"], "constraints": ["1<=n,m,a,b,p,q<=1000000000000"]}}
{"name": "1155_A. Reverse a Substring", "description": "Input\n\nThe first line of the input contains one integer n (2 <= n <= 3 * 10^5) --- the length of s.\n\nThe second line of the input contains the string s of length n consisting only of lowercase Latin letters.", "grammar": {"productions": ["<S>->[n] <n> [a-z]{n}"], "constraints": ["2<=n<=3*10^5"]}}
{"name": "1195_D2. Submarine in the Rybinsk Sea (hard edition)", "description": "Input\n\nThe first line of the input contains a single integer n (1 <= n <= 100 000) --- the number of elements in the array. The second line of the input contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9) --- the elements of the array.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100000", "1<=a_i<=10^9"]}}
{"name": "1497_D. Genius", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 100) --- the number of test cases. \n\nThe first line of each test case contains an integer n (1 <= n <= 5000) --- the number of problems.\n\nThe second line of each test case contains n integers tag_1, tag_2, ..., tag_n (1 <= tag_i <= n) --- tags of the problems.\n\nThe third line of each test case contains n integers s_1, s_2, ..., s_n (1 <= s_i <= 10^9) --- scores of the problems.\n\nIt's guaranteed that sum of n over all test cases does not exceed 5000.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n> <n> <Z_n>", "<T_1>->[n] <n> <L_n> <n> <Z_n>", "<L_i>-><L_i-1> <s> tag_i", "<L_1>->tag_1", "<Z_i>-><Z_i-1> <s> s_i", "<Z_1>->s_1"], "constraints": ["1<=t<=100", "1<=n<=5000", "1<=tag_i<=n", "1<=s_i<=10^9"]}}
{"name": "151_C. Win or Freeze", "description": "Input\n\nThe first line contains the only integer q (1 <= q <= 1013).\n\nPlease do not use the %lld specificator to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specificator.", "grammar": {"productions": ["<S>->q"], "constraints": ["1<=q<=10^13"]}}
{"name": "195_A. Let's Watch Football", "description": "Input\n\nThe first line contains three space-separated integers a, b and c (1 <= a, b, c <= 1000, a > b). The first number (a) denotes the size of data needed to watch one second of the video. The second number (b) denotes the size of data Valeric and Valerko can download from the Net per second. The third number (c) denotes the video's length in seconds.", "grammar": {"productions": ["<S>->a <s> b <s> c"], "constraints": ["1<=a<=1000", "1<=b<=1000", "1<=c<=1000", "a>b"]}}
{"name": "290_D. Orange", "description": "Input\n\nThe first line of the input is a string (between 1 and 50 characters long, inclusive). Each character will be a letter of English alphabet, lowercase or uppercase.\n\nThe second line of the input is an integer between 0 and 26, inclusive.", "grammar": {"productions": ["<S>->[a-zA-Z]{1,50} <n> integer"], "constraints": ["0<=integer<=26"]}}
{"name": "385_A. Bear and Raspberry", "description": "Input\n\nThe first line contains two space-separated integers, n and c (2 <= n <= 100, 0 <= c <= 100), --- the number of days and the number of kilos of raspberry that the bear should give for borrowing the barrel.\n\nThe second line contains n space-separated integers x1, x2, ..., xn (0 <= xi <= 100), the price of a honey barrel on day i.", "grammar": {"productions": ["<S>->[n] <s> c <n> <T_n>", "<T_i>-><T_i-1> <s> xi", "<T_1>->xi"], "constraints": ["2<=n<=100", "0<=c<=100", "0<=xi<=100"]}}
{"name": "500_C. New Year Book Reading", "description": "Input\n\nThe first line contains two space-separated integers n (2 <= n <= 500) and m (1 <= m <= 1000) --- the number of books, and the number of days for which Jaehyun would read books.\n\nThe second line contains n space-separated integers w1, w2, ..., wn (1 <= wi <= 100) --- the weight of each book.\n\nThe third line contains m space separated integers b1, b2, ..., bm (1 <= bj <= n) --- the order of books that he would read. Note that he can read the same book more than once.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <s> w_i", "<T_1>->w_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["2<=n<=500", "1<=m<=1000", "1<=w_i<=100", "1<=b_i<=n"]}}
{"name": "526_A. King of Thieves", "description": "Input\n\nThe first line contains integer n (1 <= n <= 100) --- the number of segments on the level.\n\nNext line contains the scheme of the level represented as a string of n characters '*' and '.'.", "grammar": {"productions": ["<S>->[n] <n> [*.]{n}"], "constraints": ["1<=n<=100"]}}
{"name": "691_D. Swaps in Permutation", "description": "Input\n\nThe first line contains two integers n and m (1 <= n, m <= 106) --- the length of the permutation p and the number of pairs of positions.\n\nThe second line contains n distinct integers pi (1 <= pi <= n) --- the elements of the permutation p.\n\nEach of the last m lines contains two integers (aj, bj) (1 <= aj, bj <= n) --- the pairs of positions to swap. Note that you are given a positions, not the values to swap.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <s> pi", "<T_1>->pi", "<L_i>-><L_i-1> <n> aj <s> bj", "<L_1>->aj <s> bj"], "constraints": ["1<=n,m<=10^6", "1<=pi<=n", "1<=aj,bj<=n"]}}
{"name": "716_D. Complete The Graph", "description": "Input\n\nThe first line contains five integers n, m, L, s, t (2 <= n <= 1000, 1 <= m <= 10 000, 1 <= L <= 109, 0 <= s, t <= n - 1, s != t) --- the number of vertices, number of edges, the desired length of shortest path, starting vertex and ending vertex respectively.\n\nThen, m lines describing the edges of the graph follow. i-th of them contains three integers, ui, vi, wi (0 <= ui, vi <= n - 1, ui != vi, 0 <= wi <= 109). ui and vi denote the endpoints of the edge and wi denotes its weight. If wi is equal to 0 then the weight of the corresponding edge was erased.\n\nIt is guaranteed that there is at most one edge between any pair of vertices.", "grammar": {"productions": ["<S>->n <s> [m] <s> L <s> s <s> t <n> <T_m>", "<T_i>-><T_i-1> <n> ui <s> vi <s> wi", "<T_1>->ui <s> vi <s> wi"], "constraints": ["2<=n<=1000", "1<=m<=10000", "1<=L<=10^9", "0<=s,t<=n-1", "0<=ui,vi<=n-1", "0<=wi<=10^9"]}}
{"name": "737_A. Road to Cinema", "description": "Input\n\nThe first line contains four positive integers n, k, s and t (1 <= n <= 2·105, 1 <= k <= 2·105, 2 <= s <= 109, 1 <= t <= 2·109) --- the number of cars at the car rental service, the number of gas stations along the road, the length of the road and the time in which the film starts. \n\nEach of the next n lines contains two positive integers ci and vi (1 <= ci, vi <= 109) --- the price of the i-th car and its fuel tank capacity.\n\nThe next line contains k distinct integers g1, g2, ..., gk (1 <= gi <= s - 1) --- the positions of the gas stations on the road in arbitrary order.", "grammar": {"productions": ["<S>->[n] <s> [k] <s> s <s> t <n> <T_n> <n> <L_k>", "<T_i>-><T_i-1> <n> c_i <s> v_i", "<T_1>->c_1 <s> v_1", "<L_i>-><L_i-1> <s> g_i", "<L_1>->g_1"], "constraints": ["1<=n<=2*10^5", "1<=k<=2*10^5", "2<=s<=10^9", "1<=t<=2*10^9", "1<=c_i,v_i<=10^9", "1<=g_i<=s-1"]}}
{"name": "784_B. Kids' Riddle", "description": "Input\n\nThe input contains a single integer n (0 <= n <= 2000000000).", "grammar": {"productions": ["<S>->n"], "constraints": ["0<=n<=2000000000"]}}
{"name": "805_A. Fake NP", "description": "Input\n\nThe first line contains two integers l and r (2 <= l <= r <= 109).", "grammar": {"productions": ["<S>->l <s> r"], "constraints": ["2<=l<=r<=10^9"]}}
{"name": "977_B. Two-gram", "description": "Input\n\nThe first line of the input contains integer number n (2 <= n <= 100) --- the length of string s. The second line of the input contains the string s consisting of n capital Latin letters.", "grammar": {"productions": ["<S>->[n] <n> [A-Z]{n}"], "constraints": ["2<=n<=100"]}}
{"name": "p02652 AtCoder Grand Contest 045 - 01 Unbalanced", "description": "Constraints\n\n* 1 <= |S| <= 10^6\n* Each character of S is `0`, `1`, or `?`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[01?]{1,10^6}"], "constraints": [""]}}
{"name": "p03819 AtCoder Regular Contest 068 - Snuke Line", "description": "Constraints\n\n* 1 <= N <= 3 × 10^{5}\n* 1 <= M <= 10^{5}\n* 1 <= l_i <= r_i <= M\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN M\nl_1 r_1\n:\nl_{N} r_{N}", "grammar": {"productions": ["<S>->[N] <s> M <n> <T_N>", "<T_i>-><T_i-1> <n> l_i <s> r_i", "<T_1>->l_1 <s> r_1"], "constraints": ["1<=N<=3*10^5", "1<=M<=10^5", "1<=l_i<=r_i<=M"]}}
{"name": "p00991 Grid", "description": "Input\n\nThe input is given in the following format.\n\n\nr c a1 a2 b1 b2\n\n\nInput meets the following constraints\n1 <= r, c <= 1,000\n0 <= a1, b1 <r\n0 <= a2, b2 <c", "grammar": {"productions": ["<S>->r <s> c <s> a1 <s> a2 <s> b1 <s> b2"], "constraints": ["1<=r,c<=1000", "0<=a1,b1<r", "0<=a2,b2<c"]}}
