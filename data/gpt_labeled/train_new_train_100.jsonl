{"name": "1037_E. Trips", "description": "Input\n\nThe first line contains three integers n, m, and k (2 <= n <= 2 * 10^5, 1 <= m <= 2 * 10^5, 1 <= k < n) --- the number of people, the number of days and the number of friends each person on the trip should have in the group.\n\nThe i-th (1 <= i <= m) of the next m lines contains two integers x and y (1<= x, y<= n, x!= y), meaning that persons x and y become friends on the morning of day i. It is guaranteed that x and y were not friends before.", "grammar": {"productions": ["<S>->[n] <s> [m] <s> k <n> <T_n>", "<T_i>-><T_i-1> <n> <L_m>", "<T_1>-><L_m>", "<L_i>-><L_i-1> <s> x <s> y", "<L_1>->x <s> y"], "constraints": ["2<=n<=2*10^5", "1<=m<=2*10^5", "1<=k<n", "1<=x,y<=n", "x!=y"]}}
{"name": "1189_D1. Add on a Tree", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 10^5) --- the number of nodes.\n\nEach of the next n-1 lines contains two integers u and v (1 <= u, v <= n, u != v), meaning that there is an edge between nodes u and v. It is guaranteed that these edges form a tree.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> u <s> v", "<T_1>->u <s> v"], "constraints": ["2<=n<=10^5", "1<=u,v<=n", "u!=v"]}}
{"name": "1208_D. Restore Permutation", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 2 * 10^{5}) --- the size of the permutation.\n\nThe second line contains n integers s_{1}, s_{2}, ..., s_{n} (0 <= s_{i} <= (n(n-1))/(2)).\n\nIt is guaranteed that the array s corresponds to a valid permutation of length n.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> s_i", "<T_1>->s_1"], "constraints": ["1<=n<=2*10^5", "0<=s_i<=n(n-1)/2"]}}
{"name": "1227_D1. Optimal Subsequences (Easy Version)", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 100) --- the length of the sequence a.\n\nThe second line contains elements of the sequence a: integer numbers a_1, a_2, ..., a_n (1 <= a_i <= 10^9).\n\nThe third line contains an integer m (1 <= m <= 100) --- the number of requests.\n\nThe following m lines contain pairs of integers k_j and pos_j (1 <= k <= n, 1 <= pos_j <= k_j) --- the requests.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> [m] <n> <L_m>", "<T_n>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <n> k_j <s> pos_j", "<L_1>->k_1 <s> pos_1"], "constraints": ["1<=n<=100", "1<=a_i<=10^9", "1<=m<=100", "1<=k_j<=n", "1<=pos_j<=k_j"]}}
{"name": "1269_E. K Integers", "description": "Input\n\nThe first line of input contains one integer n (1 <= n <= 200 000): the number of elements in the permutation.\n\nThe next line of input contains n integers p_1, p_2, ..., p_n: given permutation (1 <= p_i <= n).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1"], "constraints": ["1<=n<=200000", "1<=p_i<=n"]}}
{"name": "1291_E. Prefix Enlightenment", "description": "Input\n\nThe first line contains two integers n and k (1 <= n, k <= 3 * 10^5).\n\nThe second line contains a binary string of length n, representing the initial state of each lamp (the lamp i is off if s_i = 0, on if s_i = 1).\n\nThe description of each one of the k subsets follows, in the following format:\n\nThe first line of the description contains a single integer c (1 <= c <= n) --- the number of elements in the subset.\n\nThe second line of the description contains c distinct integers x_1, ..., x_c (1 <= x_i <= n) --- the elements of the subset.\n\nIt is guaranteed that: \n\n  * The intersection of any three subsets is empty; \n  * It's possible to make all lamps be simultaneously on using some operations.", "grammar": {"productions": ["<S>->[n] <s> [k] <n> [01]{n} <n> <T_k>", "<T_i>-><T_i-1> <n> [c] <n> <L_c>", "<T_1>->[c] <n> <L_c>", "<L_i>-><L_i-1> <s> x_i", "<L_1>->x_1"], "constraints": ["1<=n,k<=3*10^5", "1<=c<=n", "1<=x_i<=n"]}}
{"name": "1311_F. Moving Points", "description": "Input\n\nThe first line of the input contains one integer n (2 <= n <= 2 * 10^5) --- the number of points.\n\nThe second line of the input contains n integers x_1, x_2, ..., x_n (1 <= x_i <= 10^8), where x_i is the initial coordinate of the i-th point. It is guaranteed that all x_i are distinct.\n\nThe third line of the input contains n integers v_1, v_2, ..., v_n (-10^8 <= v_i <= 10^8), where v_i is the speed of the i-th point.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> <L_n>", "<T_n>-><T_n-1> <s> x_i", "<T_1>->x_1", "<L_n>-><L_n-1> <s> v_i", "<L_1>->v_1"], "constraints": ["2<=n<=2*10^5", "1<=x_i<=10^8", "-10^8<=v_i<=10^8"]}}
{"name": "1334_D. Minimum Euler Cycle", "description": "Input\n\nThe first line contains the single integer T (1 <= T <= 100) --- the number of test cases.\n\nNext T lines contain test cases --- one per line. The first and only line of each test case contains three integers n, l and r (2 <= n <= 10^5, 1 <= l <= r <= n(n - 1) + 1, r - l + 1 <= 10^5) --- the number of vertices in K_n, and segment of the cycle to print.\n\nIt's guaranteed that the total sum of n doesn't exceed 10^5 and the total sum of r - l + 1 doesn't exceed 10^5.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> <L_n>", "<T_1>-><L_n>", "<L_n>->[n] <s> l <s> r"], "constraints": ["1<=T<=100","2<=n<=10^5", "1<=l<=r", "r<=n(n-1)+1", "r-l+1<=10^5"]}}
{"name": "1354_F. Summoning Minions", "description": "Input\n\nThe first line contains one integer T (1 <= T <= 75) --- the number of test cases.\n\nEach test case begins with a line containing two integers n and k (1 <= k <= n <= 75) --- the number of minions availible for summoning, and the maximum number of minions that can be controlled by Polycarp, respectively.\n\nThen n lines follow, the i-th line contains 2 integers a_i and b_i (1 <= a_i <= 10^5, 0 <= b_i <= 10^5) --- the parameters of the i-th minion.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> [n] <s> [k] <n> <L_n>", "<T_1>->[n] <s> [k] <n> <L_n>", "<L_i>-><L_i-1> <n> a_i <s> b_i", "<L_1>->a_1 <s> b_1"], "constraints": ["1<=T<=75", "1<=k<=n<=75", "1<=a_i<=10^5, 0<=b_i<=10^5"]}}
{"name": "143_A. Help Vasilisa the Wise 2", "description": "Input\n\nThe input contains numbers written on the edges of the lock of the box. The first line contains space-separated integers r1 and r2 that define the required sums of numbers in the rows of the square. The second line contains space-separated integers c1 and c2 that define the required sums of numbers in the columns of the square. The third line contains space-separated integers d1 and d2 that define the required sums of numbers on the main and on the side diagonals of the square (1 <= r1, r2, c1, c2, d1, d2 <= 20). Correspondence between the above 6 variables and places where they are written is shown on the picture below. For more clarifications please look at the second sample test that demonstrates the example given in the problem statement.\n\n<image>", "grammar": {"productions": ["<S>->r1 <s> r2 <n> c1 <s> c2 <n> d1 <s> d2"], "constraints": ["1<=r1,r2,c1,c2,d1,d2<=20"]}}
{"name": "1466_F. Euclid's nightmare", "description": "Input\n\nIn the first line of input, there are two integers n, m (1 <= n, m <= 5 * 10^5) denoting the number of vectors in S and the number of dimensions. \n\nNext n lines contain the description of the vectors in S. In each of them there is an integer k (1 <= k <= 2) and then follow k distinct integers x_1, ... x_k (1 <= x_i <= m). This encodes an m-dimensional vector having 1s on coordinates x_1, ... x_k and 0s on the rest of them.\n\nAmong the n vectors, no two are the same.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n>", "<T_i>-><T_i-1> <n> [k] <s> <L_k>", "<T_1>->[k] <s> <L_k>", "<L_i>-><L_i-1> <s> x_i", "<L_1>->x_1"], "constraints": ["1<=n,m<=5*10^5", "1<=k<=2", "1<=x_i<=m"]}}
{"name": "1490_G. Old Floppy Drive ", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 10^4) --- the number of test cases. Then t test cases follow.\n\nThe first line of each test case consists of two positive integers n, m (1 <= n, m <= 2 * 10^5) --- the number of numbers on the disk and the number of asked questions.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (-10^9 <= a_i <= 10^9).\n\nThe third line of each test case contains m positive integers x_1, x_2, ..., x_m (1 <= x <= 10^9).\n\nIt is guaranteed that the sums of n and m over all test cases do not exceed 2 * 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> [m] <n> <L_n> <n> <Z_m>", "<T_1>->[n] <s> [m] <n> <L_n> <n> <Z_m>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_i", "<Z_i>-><Z_i-1> <s> x_i", "<Z_1>->x_i"], "constraints": ["1<=t<=10^4", "1<=n,m<=2*10^5", "-10^9<=a_i<=10^9", "1<=x_i<=10^9"]}}
{"name": "1513_C. Add One", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 2 * 10^5) --- the number of test cases.\n\nThe only line of each test case contains two integers n (1 <= n <= 10^9) and m (1 <= m <= 2 * 10^5) --- the initial number and the number of operations.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> m", "<T_1>->n <s> m"], "constraints": ["1<=t<=2*10^5", "1<=n<=10^9", "1<=m<=2*10^5"]}}
{"name": "1540_C1. Converging Array (Easy Version)", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 100).\n\nThe second line contains n integers c_1, c_2 ..., c_n (0 <= c_i <= 100).\n\nThe third line contains n-1 integers b_1, b_2, ..., b_{n-1} (0 <= b_i <= 100).\n\nThe fourth line contains a single integer q (q=1).\n\nThe fifth line contains q space separated integers x_1, x_2, ..., x_q (-10^5 <= x_i <= 10^5).", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> <L_n-1> <n> q <n> <Z_q>", "<T_i>-><T_i-1> <s> c_i", "<T_1>->c_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1", "<Z_i>-><Z_i-1> <s> x_i", "<Z_1>->x_1"], "constraints": ["2<=n<=100", "0<=c_i<=100", "0<=b_i<=100", "q=1", "-10^5<=x_i<=10^5"]}}
{"name": "168_A. Wizards and Demonstration", "description": "Input\n\nThe first line contains three space-separated integers, n, x, y (1 <= n, x, y <= 104, x <= n) --- the number of citizens in the city, the number of wizards and the percentage the administration needs, correspondingly.\n\nPlease note that y can exceed 100 percent, that is, the administration wants to see on a demonstration more people that actually live in the city ( > n).", "grammar": {"productions": ["<S>->n <s> x <s> y"], "constraints": ["1<=n,x,y<=10^4", "x<=n", "y>n"]}}
{"name": "20_B. Equation", "description": "Input\n\nThe first line contains three integer numbers A, B and C ( - 105 <= A, B, C <= 105). Any coefficient may be equal to 0.", "grammar": {"productions": ["<S>->A <s> B <s> C"], "constraints": ["-10^5<=A<=10^5", "-10^5<=B<=10^5", "-10^5<=C<=10^5"]}}
{"name": "260_B. Ancient Prophesy", "description": "Input\n\nThe first line contains the Prophesy: a non-empty string that only consists of digits and characters \"-\". The length of the Prophesy doesn't exceed 105 characters.", "grammar": {"productions": ["<S>->[0-9-]{1,10^5}"], "constraints": [""]}}
{"name": "284_B. Cows and Poker Game", "description": "Input\n\nThe first line contains a single integer, n (2 <= n <= 2\u00b7105). The second line contains n characters, each either \"A\", \"I\", or \"F\". The i-th character is \"A\" if the i-th player's status is \"ALLIN\", \"I\" if the i-th player's status is \"IN\", or \"F\" if the i-th player's status is \"FOLDED\".", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> [AIF]{1}", "<T_1>->[AIF]{1}"], "constraints": ["2<=n<=200000"]}}
{"name": "39_H. Multiplication Table", "description": "Input\n\nThe first line contains a single integer k (2 <= k <= 10) --- the radix of the system.", "grammar": {"productions": ["<S>->k"], "constraints": ["2<=k<=10"]}}
{"name": "44_B. Cola", "description": "Input\n\nThe first line contains four integers --- n, a, b, c (1 <= n <= 10000, 0 <= a, b, c <= 5000).", "grammar": {"productions": ["<S>->n <s> a <s> b <s> c"], "constraints": ["1<=n<=10000", "0<=a<=5000", "0<=b<=5000", "0<=c<=5000"]}}
{"name": "545_C. Woodcutters", "description": "Input\n\nThe first line contains integer n (1 <= n <= 105) --- the number of trees.\n\nNext n lines contain pairs of integers xi, hi (1 <= xi, hi <= 109) --- the coordinate and the height of the \u0456-th tree.\n\nThe pairs are given in the order of ascending xi. No two trees are located at the point with the same coordinate.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> xi <s> hi", "<T_1>->xi <s> hi"], "constraints": ["1<=n<=10^5", "1<=xi,hi<=10^9"]}}
{"name": "571_E. Geometric Progressions", "description": "Input\n\nThe first line contains integer (1 <= n <= 100) --- the number of geometric progressions. \n\nNext n lines contain pairs of integers a, b (1 <= a, b <= 109), that are the first element and the common ratio of the corresponding geometric progression.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> a <s> b", "<T_1>->a <s> b"], "constraints": ["1<=n<=100", "1<=a,b<=10^9"]}}
{"name": "593_C. Beautiful Function", "description": "Input\n\nThe first line of the input contains number n (1 <= n <= 50) --- the number of circles Ruslan thinks of. Next follow n lines, each of them containing three integers xi, yi and ri (0 <= xi, yi <= 50, 2 <= ri <= 50) --- the coordinates of the center and the raduis of the i-th circle.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> xi <s> yi <s> ri", "<T_1>->xi <s> yi <s> ri"], "constraints": ["1<=n<=50", "0<=xi,yi<=50", "2<=ri<=50"]}}
{"name": "634_C. Factory Repairs", "description": "Input\n\nThe first line contains five integers n, k, a, b, and q (1 <= k <= n <= 200 000, 1 <= b < a <= 10 000, 1 <= q <= 200 000) --- the number of days, the length of the repair time, the production rates of the factory, and the number of updates, respectively.\n\nThe next q lines contain the descriptions of the queries. Each query is of one of the following two forms: \n\n  * 1 di ai (1 <= di <= n, 1 <= ai <= 10 000), representing an update of ai orders on day di, or \n  * 2 pi (1 <= pi <= n - k + 1), representing a question: at the moment, how many orders could be filled if the factory decided to commence repairs on day pi? \n\n\n\nIt's guaranteed that the input will contain at least one query of the second type.", "grammar": {"productions": ["<S>->[n] <s> [k] <s> [a] <s> [b] <s> [q] <n> <T_q>", "<T_q>-><T_q-1> <n> <Query>", "<T_1>-><Query>", "<Query>->'1' <s> [di] <s> [ai]|'2' <s> [pi]"], "constraints": ["1<=k<=n<=200000", "1<=b<a<=10000", "1<=q<=200000", "For the first type of query:1<=di<=n,1<=ai<=10000", "For the second type of query:1<=pi<=n-k+1"]}}
{"name": "663_A. Rebus", "description": "Input\n\nThe only line of the input contains a rebus. It's guaranteed that it contains no more than 100 question marks, integer n is positive and doesn't exceed 1 000 000, all letters and integers are separated by spaces, arithmetic operations are located only between question marks.", "grammar": {"productions": [""], "constraints": ["1<=q<=100", "1<=n<=1000000"]}}
{"name": "730_J. Bottles", "description": "Input\n\nThe first line contains positive integer n (1 <= n <= 100) --- the number of bottles.\n\nThe second line contains n positive integers a1, a2, ..., an (1 <= ai <= 100), where ai is the amount of soda remaining in the i-th bottle.\n\nThe third line contains n positive integers b1, b2, ..., bn (1 <= bi <= 100), where bi is the volume of the i-th bottle.\n\nIt is guaranteed that ai <= bi for any i.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> <L_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["1<=n<=100", "1<=a_i<=100", "1<=b_i<=100", "a_i<=b_i"]}}
{"name": "776_A. A Serial Killer", "description": "Input\n\nFirst line of input contains two names (length of each of them doesn't exceed 10), the two initials potential victims. Next line contains integer n (1 <= n <= 1000), the number of days.\n\nNext n lines contains two names (length of each of them doesn't exceed 10), first being the person murdered on this day and the second being the one who replaced that person.\n\nThe input format is consistent, that is, a person murdered is guaranteed to be from the two potential victims at that time. Also, all the names are guaranteed to be distinct and consists of lowercase English letters.", "grammar": {"productions": ["<S>->[a-z]{1,10} <s> [a-z]{1,10} <n> [n] <n> <T_n>", "<T_i>-><T_i-1> <n> [a-z]{1,10} <s> [a-z]{1,10}", "<T_1>->[a-z]{1,10} <s> [a-z]{1,10}"], "constraints": ["1<=n<=1000"]}}
{"name": "7_B. Memory Manager", "description": "Input\n\nThe first line of the input data contains two positive integers t and m (1 <= t <= 100;1 <= m <= 100), where t --- the amount of operations given to the memory manager for processing, and m --- the available memory size in bytes. Then there follow t lines where the operations themselves are given. The first operation is alloc n (1 <= n <= 100), where n is an integer. The second one is erase x, where x is an arbitrary 32-bit integer numerical token. The third operation is defragment.", "grammar": {"productions": ["<S>->[t] <s> [m] <n> <T_t>", "<T_i>-><T_i-1> <n> <Operation>", "<T_1>-><Operation>", "<Operation>->'alloc' <s> [n]|'erase' <s> [x]|'defragment'"], "constraints": ["1<=t<=100", "1<=m<=10", "1<=n<=100"]}}
{"name": "846_E. Chemistry in Berland", "description": "Input\n\nThe first line contains one integer number n (1 <= n <= 105) --- the number of materials discovered by Berland chemists.\n\nThe second line contains n integer numbers b1, b2... bn (1 <= bi <= 1012) --- supplies of BerSU laboratory.\n\nThe third line contains n integer numbers a1, a2... an (1 <= ai <= 1012) --- the amounts required for the experiment.\n\nThen n - 1 lines follow. j-th of them contains two numbers xj + 1 and kj + 1 that denote transformation of (j + 1)-th material (1 <= xj + 1 <= j, 1 <= kj + 1 <= 109).", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> <L_n> <n> <Z_n>", "<T_i>-><T_i-1> <s> b_i", "<T_1>->b_1", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1", "<Z_i>-><Z_i-1> <n> x_j+1 <s> k_j+1", "<Z_1>->x_2 <s> k_2"], "constraints": ["1<=n<=10^5", "1<=b_i<=10^12", "1<=a_i<=10^12", "1<=xj+1<=j", "1<=kj+1<=10^9"]}}
{"name": "868_A. Bark to Unlock", "description": "Input\n\nThe first line contains two lowercase English letters --- the password on the phone.\n\nThe second line contains single integer n (1 <= n <= 100) --- the number of words Kashtanka knows.\n\nThe next n lines contain two lowercase English letters each, representing the words Kashtanka knows. The words are guaranteed to be distinct.", "grammar": {"productions": ["<S>->[a-z]{2} <n> [n] <n> <T_n>", "<T_i>-><T_i-1> <n> [a-z]{2}", "<T_1>->[a-z]{2}"], "constraints": ["1<=n<=100"]}}
{"name": "893_D. Credit Card", "description": "Input\n\nThe first line contains two integers n, d (1 <= n <= 105, 1 <= d <= 109) ---the number of days and the money limitation.\n\nThe second line contains n integer numbers a1, a2, ... an ( - 104 <= ai <= 104), where ai represents the transaction in i-th day.", "grammar": {"productions": ["<S>->[n] <s> d <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=10^5", "1<=d<=10^9", "-10^4<=a_i<=10^4"]}}
{"name": "938_B. Run For Your Prize", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 105) --- the number of prizes.\n\nThe second line contains n integers a1, a2, ..., an (2 <= ai <= 106 - 1) --- the positions of the prizes. No two prizes are located at the same position. Positions are given in ascending order.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=10^5", "2<=a_i<=10^6-1"]}}
{"name": "963_B. Destruction of a Tree", "description": "Input\n\nThe first line contains integer n (1 <= n <= 2\u00b7105) --- number of vertices in a tree.\n\nThe second line contains n integers p1, p2, ..., pn (0 <= pi <= n). If pi != 0 there is an edge between vertices i and pi. It is guaranteed that the given graph is a tree.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1"], "constraints": ["1<=n<=2*10^5", "0<=p_i<=n"]}}
{"name": "990_E. Post Lamps", "description": "Input\n\nThe first line contains three integer numbers n, m and k (1 <= k <= n <= 10^6, 0 <= m <= n) --- the length of the segment of the street Adilbek wants to illuminate, the number of the blocked positions and the maximum power of the post lamp available.\n\nThe second line contains m integer numbers s_1, s_2, ..., s_m (0 <= s_1 < s_2 < ... s_m < n) --- the blocked positions.\n\nThe third line contains k integer numbers a_1, a_2, ..., a_k (1 <= a_i <= 10^6) --- the costs of the post lamps.", "grammar": {"productions": ["<S>->[n] <s> [m] <s> [k] <n> <T_m> <n> <T_k>", "<T_i>-><T_i-1> <s> s_i", "<T_1>->s_1", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=n<=10^6", "0<=m<=n", "1<=k<=n", "0<=s_i< n", "1<=a_i<=10^6"]}}
{"name": "p03153 KEYENCE Programming Contest 2019 - Connecting Cities", "description": "Constraints\n\n* 1 <= N <= 2 * 10^5\n* 1 <= D <= 10^9\n* 1 <= A_{i} <= 10^9\n* A_{i} and D are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN D\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <s> D <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=2*10^5", "1<=D<=10^9", "1<=A_i<=10^9"]}}
{"name": "p03297 AtCoder Grand Contest 026 - rng_10s", "description": "Constraints\n\n* 1 <= T <= 300\n* 1 <= A, B, C, D <= 10^{18}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nT\nA_1 B_1 C_1 D_1\nA_2 B_2 C_2 D_2\n:\nA_T B_T C_T D_T\n\n\nIn the i-th query, A = A_i, B = B_i, C = C_i, D = D_i.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> A_i <s> B_i <s> C_i <s> D_i", "<T_1>->A_1 <s> B_1 <s> C_1 <s> D_1"], "constraints": ["1<=T<=300", "1<=A,B,C,D<=10^18"]}}
{"name": "p03616 AtCoder Regular Contest 082 - Sandglass", "description": "Constraints\n\n* 1<=X<=10^9\n* 1<=K<=10^5\n* 1<=r_1<r_2< .. <r_K<=10^9\n* 1<=Q<=10^5\n* 0<=t_1<t_2< .. <t_Q<=10^9\n* 0<=a_i<=X (1<=i<=Q)\n* All input values are integers.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nX\nK\nr_1 r_2 .. r_K\nQ\nt_1 a_1\nt_2 a_2\n:\nt_Q a_Q", "grammar": {"productions": ["<S>->X <n> [K] <n> <T_K> [Q] <n> <L_Q>", "<T_i>-><T_i-1> <s> r_i", "<T_1>->r_1", "<L_i>-><L_i-1> <n> t_i <s> a_i", "<L_1>->t_1 <s> a_1"], "constraints": ["1<=X<=10^9", "1<=K<=10^5", "1<=r_i<=10^9", "1<=Q<=10^5", "0<=t_i<= 10^9", "0<=a_i<=X"]}}
{"name": "p00035 Is it Convex?", "description": "Input\n\nGiven multiple datasets. The format of each dataset is as follows.\n\n$ x_a $, $ y_a $, $ x_b $, $ y_b $, $ x_c $, $ y_c $, $ x_d $, $ y_d $\n\n$ x_a $, $ y_a $, $ x_b $, $ y_b $, $ x_c $, $ y_c $, $ x_d $, $ y_d $ are -100 or more and 100 or less, respectively, and are given as real numbers.\n\n1 No more than two points can be lined up on a straight line. Also, if you connect the points in the order of input, the coordinates of the points will be input in the order of forming a quadrangle. (That is, the points are not given in the order shown in Figure 2.)\n\nThe number of datasets does not exceed 100.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> x_a <s> y_a <s> x_b <s> y_b <s> x_c <s> y_c <s> x_d <s> y_d", "<T_1>->x_a <s> y_a <s> x_b <s> y_b <s> x_c <s> y_c <s> x_d <s> y_d"], "constraints": ["-100<=x_a, y_a, x_b, y_b, x_c, y_c, x_d, y_d<=100", "1<=n<=100"]}}
{"name": "p00167 Bubble Sort", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by a single line of zeros. Each dataset is given in the following format:\n\n\nn\na1\na2\n::\nan\n\n\nThe first line gives the number n (1 <= n <= 100), and the following n lines give the i-th number ai (1 <= ai <= 1000000).\n\nThe number of datasets does not exceed 20.", "grammar": {"productions": ["S>-><T_d>", "<T_d>->[d] <n> <T_n> <T_d-1>", "<T_d-1>->0", "<T_n>-><T_n-1> <n> [1-1000000]", "<T_1>->[1-1000000]"], "constraints": ["1<=n<=20", "1<=a_i<=1000000", "d<=20"]}}
{"name": "p00323 Metal Recycling", "description": "Input\n\nThe input is given in the following format.\n\n\nN\na1 b1\na2 b2\n::\naN bN\n\n\nThe first line gives the number of recovery vehicles N (1 <= N <= 100000). In the next N lines, the integer ai (0 <= ai <= 100000) representing the weight in \"Bocco\" units and the integer bi (0 <= bi <=) representing the number in \"Margue\" units of the mass of Aidunium collected by the recovery vehicle i. 100000) is given.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["1<=N<=100000", "0<=a_i<=100000", "0<=b_i<=100000"]}}
{"name": "p00822 Weather Forecast", "description": "Input\n\nThe input is a sequence of data sets, followed by a terminating line containing only a zero.\n\nA data set gives the number N of days (no more than 365) in the period on a single line, followed by N lines giving the schedule for markets and festivals. The i-th line gives the schedule for the i-th day. It is composed of 16 numbers, either 0 or 1, 0 standing for a normal day, and 1 a market or festival day. The numbers are separated by one or more spaces.", "grammar": {"productions": ["<S>->[N] <n> <T_N> 0", "<T_i>-><T_i-1> <n> [01]{16}", "<T_1>->[01]{16}"], "constraints": ["1<=N<=365"]}}
{"name": "p01086 Short Phrase", "description": "Input\n\nThe input consists of multiple datasets, each in the following format.\n\n> n\n>  w1\n>  ...\n>  wn\n>\n\nHere, n is the number of words, which is a positive integer not exceeding 40; wi is the i-th word, consisting solely of lowercase letters from 'a' to 'z'. The length of each word is between 1 and 10, inclusive. You can assume that every dataset includes a Short Phrase.\n\nThe end of the input is indicated by a line with a single zero.", "grammar": {"productions": ["<S>->[n] <n> <T_n> 0", "<T_i>-><T_i-1> <n> [a-z]{1,10}", "<T_1>->[a-z]{1,10}"], "constraints": ["1<=n<=40"]}}
{"name": "p01356 Nearest Station", "description": "Input\n\n1 <= n, m, a, b, p, q <= 1 000 000 000 000 (integer)", "grammar": {"productions": ["<S>->n <s> m <s> a <s> b <s> p <s> q"], "constraints": ["1<=n,m,a,b,p,q<=1000000000000"]}}
{"name": "p01538 Kakezan", "description": "Constraints\n\n> 1 <= Q <= 100\n> 0 <= Ni <= 106\n>\n\nInput\n\n> Q\n> N1\n> N2\n> ...\n> NQ\n>\n\n* Q represents the number of integers greater than or equal to 0 given\n* Ni is an integer greater than or equal to 0 that Taro is interested in, and represents the i-th one.", "grammar": {"productions": ["<S>->[Q] <n> <T_Q>", "<T_i>-><T_i-1> <n> Ni", "<T_1>->Ni"], "constraints": ["1<=Q<=100", "0<=Ni<=10^6"]}}
{"name": "p01694 Step Aerobics", "description": "Input\n\nThe input consists of multiple data sets, and the number of data sets contained in one input is 150 or less. The format of each data set is as follows.\n\n> $ n $\n> $ f_1 $ $ f_2 $ ... $ f_n $\n\nIn the first line, the integer $ n $ ($ 1 \\ le n \\ le 100 $) representing the number of times the foot is moved is given. In the second line, $ f_i $, which is a character string representing the movement of the foot, is given in chronological order by $ n $, separated by spaces. $ f_i $ is one of the following four types of character strings.\n\n* \"lu\": Raise your left foot to the platform.\n* \"ru\": Raise your right foot to the platform.\n* \"ld\": Lower your left foot to the floor.\n* \"rd\": Lower your right foot to the floor.\n\n\n\nIt can be assumed that no action is input that lowers the foot on the floor or raises the foot on the platform.\n\nThe line where $ n $ is 0 indicates the end of input. Do not process this data.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> lu|ru|ld|rd", "<T_1>->lu|ru|ld|rd"], "constraints": ["1<=n<=100"]}}
{"name": "p01974 Pigeonhole principle", "description": "Input\n\n5\n1 2 4 7 10", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> number", "<T_1>->number"], "constraints": [""]}}
{"name": "p02260 Selection Sort", "description": "Constraints\n\n1 <= N <= 100\n\nInput\n\nThe first line of the input includes an integer N, the number of elements in the sequence.\n\nIn the second line, N elements of the sequence are given separated by space characters.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_N>-><T_N-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=100"]}}
{"name": "101_C. Vectors", "description": "Input\n\nThe first line contains integers x1 \u0438 y1 --- the coordinates of the vector A ( - 108 <= x1, y1 <= 108). The second and the third line contain in the similar manner vectors B and C (their coordinates are integers; their absolute value does not exceed 108).", "grammar": {"productions": ["<S>->x1 <s> y1 <n> x2 <s> y2 <n> x3 <s> y3"], "constraints": ["10^8<=x1,y1,x2,y2,x3,y3<=10^8"]}}
{"name": "1107_D. Compression", "description": "Input\n\nThe first line contains one number n (4 <= n <= 5200) --- the number of rows and columns in the matrix A. It is guaranteed that n is divisible by 4.\n\nThen the representation of matrix follows. Each of n next lines contains n/4 one-digit hexadecimal numbers (that is, these numbers can be represented either as digits from 0 to 9 or as uppercase Latin letters from A to F). Binary representation of each of these numbers denotes next 4 elements of the matrix in the corresponding row. For example, if the number B is given, then the corresponding elements are 1011, and if the number is 5, then the corresponding elements are 0101.\n\nElements are not separated by whitespaces.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_n>-><T_n-1> <n> [0-9A-F]{1,n/4}", "<T_1>->[0-9A-F]{1,n/4}"], "constraints": ["4<=n<=5200", "n%4 ==0"]}}
{"name": "1136_D. Nastya Is Buying Lunch", "description": "Input\n\nThe first line contains two integers n and m (1 <= n <= 3 * 10^{5}, 0 <= m <= 5 * 10^{5}) --- the number of pupils in the queue and number of pairs of pupils such that the first one agrees to change places with the second one if the first is directly in front of the second.\n\nThe second line contains n integers p_1, p_2, ..., p_n --- the initial arrangement of pupils in the queue, from the queue start to its end (1 <= p_i <= n, p is a permutation of integers from 1 to n). In other words, p_i is the number of the pupil who stands on the i-th position in the queue.\n\nThe i-th of the following m lines contains two integers u_i, v_i (1 <= u_i, v_i <= n, u_i != v_i), denoting that the pupil with number u_i agrees to change places with the pupil with number v_i if u_i is directly in front of v_i. It is guaranteed that if i != j, than v_i != v_j or u_i != u_j. Note that it is possible that in some pairs both pupils agree to change places with each other.\n\nNastya is the last person in the queue, i.e. the pupil with number p_n.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1", "<L_i>-><L_i-1> <n> u_i <s> v_i", "<L_1>->u_1 <s> v_1"], "constraints": ["1<=n<=3*10^5", "0<=m<=5*10^5", "1<=p_i<=n", "1<=u_i,v_i<=n", "u_i!=v_i"]}}
{"name": "1155_A. Reverse a Substring", "description": "Input\n\nThe first line of the input contains one integer n (2 <= n <= 3 * 10^5) --- the length of s.\n\nThe second line of the input contains the string s of length n consisting only of lowercase Latin letters.", "grammar": {"productions": ["<S>->[n] <n> [a-z]{n}"], "constraints": ["2<=n<=3*10^5"]}}
{"name": "1176_F. Destroy it!", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 2 * 10^5) --- the number of turns.\n\nThen n blocks of input follow, the i-th block representing the cards you get during the i-th turn.\n\nEach block begins with a line containing one integer k_i (1 <= k_i <= 2 * 10^5) --- the number of cards you get during i-th turn. Then k_i lines follow, each containing two integers c_j and d_j (1 <= c_j <= 3, 1 <= d_j <= 10^9) --- the parameters of the corresponding card.\n\nIt is guaranteed that sum _{i = 1}^{n} k_i <= 2 * 10^5.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> [k_i] <n> <L_k> <n> <T_1>", "<T_1>->[k_i] <n> <L_k>", "<L_i>-><L_i-1> <n> c_j <s> d_j <n> <L_1>", "<L_1>->c_j <s> d_j"], "constraints": ["1<=n<=2*10^5", "1<=k_i<=2*10^5", "1<=c_j<=3", "1<=d_j<=10^9"]}}
{"name": "1195_D2. Submarine in the Rybinsk Sea (hard edition)", "description": "Input\n\nThe first line of the input contains a single integer n (1 <= n <= 100 000) --- the number of elements in the array. The second line of the input contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9) --- the elements of the array.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100000", "1<=a_i<=10^9"]}}
{"name": "1277_E. Two Fairs", "description": "Input\n\nThe first line of the input contains an integer t (1 <= t <= 4*10^4) --- the number of test cases in the input. Next, t test cases are specified.\n\nThe first line of each test case contains four integers n, m, a and b (4 <= n <= 2*10^5, n - 1 <= m <= 5*10^5, 1 <= a,b <= n, a != b) --- numbers of cities and roads in Berland and numbers of two cities where fairs are held, respectively.\n\nThe following m lines contain descriptions of roads between cities. Each of road description contains a pair of integers u_i, v_i (1 <= u_i, v_i <= n, u_i != v_i) --- numbers of cities connected by the road.\n\nEach road is bi-directional and connects two different cities. It is guaranteed that from any city you can pass to any other by roads. There can be more than one road between a pair of cities.\n\nThe sum of the values of n for all sets of input data in the test does not exceed 2*10^5. The sum of the values of m for all sets of input data in the test does not exceed 5*10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> [m] <s> a <s> b <n> <L_m>", "<T_1>->[n] <s> [m] <s> a <s> b <n> <L_m>", "<L_i>-><L_i-1> <n> u_i <s> v_i", "<L_1>->u_1 <s> v_1"], "constraints": ["1<=t<=4*10^4", "4<=n<=2*10^5", "n-1<=m<=5*10^5", "1<=a,b<=n", "a!=b", "1<=u_i,v_i<=n", "u_i!=v_i"]}}
{"name": "1382_A. Common Subsequence", "description": "Input\n\nThe first line contains a single integer t (1<= t<= 1000) --- the number of test cases. Next 3t lines contain descriptions of test cases.\n\nThe first line of each test case contains two integers n and m (1<= n,m<= 1000) --- the lengths of the two arrays.\n\nThe second line of each test case contains n integers a_1,...,a_n (1<= a_i<= 1000) --- the elements of the first array.\n\nThe third line of each test case contains m integers b_1,...,b_m (1<= b_i<= 1000) --- the elements of the second array.\n\nIt is guaranteed that the sum of n and the sum of m across all test cases does not exceed 1000 (sum_{i=1}^t n_i, sum_{i=1}^t m_i<= 1000).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> [m] <n> <L_n> <n> <Z_m> <n> <T_i-3>", "<T_1>->[n] <s> [m] <n> <L_n> <n> <Z_m>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1", "<Z_i>-><Z_i-1> <s> b_i", "<Z_1>->b_1"], "constraints": ["1<=t<=1000", "1<=n,m<=1000", "1<=a_i,b_i<=1000"]}}
{"name": "1497_D. Genius", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 100) --- the number of test cases. \n\nThe first line of each test case contains an integer n (1 <= n <= 5000) --- the number of problems.\n\nThe second line of each test case contains n integers tag_1, tag_2, ..., tag_n (1 <= tag_i <= n) --- tags of the problems.\n\nThe third line of each test case contains n integers s_1, s_2, ..., s_n (1 <= s_i <= 10^9) --- scores of the problems.\n\nIt's guaranteed that sum of n over all test cases does not exceed 5000.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n> <n> <Z_n>", "<T_1>->[n] <n> <L_n> <n> <Z_n>", "<L_i>-><L_i-1> <s> tag_i", "<L_1>->tag_1", "<Z_i>-><Z_i-1> <s> s_i", "<Z_1>->s_1"], "constraints": ["1<=t<=100", "1<=n<=5000", "1<=tag_i<=n", "1<=s_i<=10^9"]}}
{"name": "151_C. Win or Freeze", "description": "Input\n\nThe first line contains the only integer q (1 <= q <= 1013).\n\nPlease do not use the %lld specificator to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specificator.", "grammar": {"productions": ["<S>->q"], "constraints": ["1<=q<=10^13"]}}
{"name": "1547_C. Pair Programming", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 1000). Then t test cases follow. Before each test case, there is an empty line.\n\nEach test case contains three lines. The first line contains three integers k, n, m (0 <= k <= 100, 1 <= n, m <= 100) --- the initial number of lines in file and lengths of Monocarp's and Polycarp's sequences of changes respectively.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 <= a_i <= 300).\n\nThe third line contains m integers b_1, b_2, ..., b_m (0 <= b_j <= 300).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> k <s> [n] <s> [m] <n> <L_n> <n> <Z_m>", "<T_1>->k <s> [n] <s> [m] <n> <L_n> <n> <Z_m>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1", "<Z_i>-><Z_i-1> <s> b_j", "<Z_1>->b_1"], "constraints": ["1<=t<=1000", "0<=k<=100", "1<=n,m<=100", "0<=a_i<=300", "0<=b_j<=300"]}}
{"name": "195_A. Let's Watch Football", "description": "Input\n\nThe first line contains three space-separated integers a, b and c (1 <= a, b, c <= 1000, a > b). The first number (a) denotes the size of data needed to watch one second of the video. The second number (b) denotes the size of data Valeric and Valerko can download from the Net per second. The third number (c) denotes the video's length in seconds.", "grammar": {"productions": ["<S>->a <s> b <s> c"], "constraints": ["1<=a<=1000", "1<=b<=1000", "1<=c<=1000", "a>b"]}}
{"name": "242_C. King's Path", "description": "Input\n\nThe first line contains four space-separated integers x0, y0, x1, y1 (1 <= x0, y0, x1, y1 <= 109), denoting the initial and the final positions of the king.\n\nThe second line contains a single integer n (1 <= n <= 105), denoting the number of segments of allowed cells. Next n lines contain the descriptions of these segments. The i-th line contains three space-separated integers ri, ai, bi (1 <= ri, ai, bi <= 109, ai <= bi), denoting that cells in columns from number ai to number bi inclusive in the ri-th row are allowed. Note that the segments of the allowed cells can intersect and embed arbitrarily.\n\nIt is guaranteed that the king's initial and final position are allowed cells. It is guaranteed that the king's initial and the final positions do not coincide. It is guaranteed that the total length of all given segments doesn't exceed 105.", "grammar": {"productions": ["<S>->x0 <s> y0 <s> x1 <s> y1 <n> [n] <n> <T_n>", "<T_i>-><T_i-1> <n> ri <s> ai <s> bi", "<T_1>->ri <s> ai <s> bi"], "constraints": ["1<=x0,y0,x1,y1<=10^9", "1<=n<=10^5", "1<=ri,ai,bi<=10^9", "ai<=bi"]}}
{"name": "290_D. Orange", "description": "Input\n\nThe first line of the input is a string (between 1 and 50 characters long, inclusive). Each character will be a letter of English alphabet, lowercase or uppercase.\n\nThe second line of the input is an integer between 0 and 26, inclusive.", "grammar": {"productions": ["<S>->[a-zA-Z]{1,50} <n> integer"], "constraints": ["0<=integer<=26"]}}
{"name": "316_B2. EKG", "description": "Input\n\nThe first line contains two integers n (1 <= n <= 103) and x (1 <= x <= n) --- the number of beavers that stand in the queue and the Smart Beaver's number, correspondingly. All willing to get to the doctor are numbered from 1 to n.\n\nThe second line contains n integers a1, a2, ..., an (0 <= ai <= n) --- the number of the beaver followed by the i-th beaver. If ai = 0, then the i-th beaver doesn't know who is should be in front of him. It is guaranteed that values ai are correct. That is there is no cycles in the dependencies. And any beaver is followed by at most one beaver in the queue.\n\nThe input limits for scoring 30 points are (subproblem B1): \n\n  * It is guaranteed that the number of zero elements ai doesn't exceed 20. \n\n\n\nThe input limits for scoring 100 points are (subproblems B1+B2): \n\n  * The number of zero elements ai is arbitrary.", "grammar": {"productions": ["<S>->[n] <s> x <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=10^3", "1<=x<=n", "0<=a_i<=n"]}}
{"name": "339_A. Helpful Maths", "description": "Input\n\nThe first line contains a non-empty string s --- the sum Xenia needs to count. String s contains no spaces. It only contains digits and characters \"+\". Besides, string s is a correct sum of numbers 1, 2 and 3. String s is at most 100 characters long.", "grammar": {"productions": ["<S>->[123+]{1,100}"], "constraints": [""]}}
{"name": "361_C. Levko and Array Recovery", "description": "Input\n\nThe first line contains two integers n and m (1 <= n, m <= 5000) --- the size of the array and the number of operations in Levko's records, correspondingly.\n\nNext m lines describe the operations, the i-th line describes the i-th operation. The first integer in the i-th line is integer ti (1 <= ti <= 2) that describes the operation type. If ti = 1, then it is followed by three integers li, ri and di (1 <= li <= ri <= n,  - 104 <= di <= 104) --- the description of the operation of the first type. If ti = 2, then it is followed by three integers li, ri and mi (1 <= li <= ri <= n,  - 5\u00b7107 <= mi <= 5\u00b7107) --- the description of the operation of the second type.\n\nThe operations are given in the order Levko performed them on his array.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_m>", "<T_i>-><T_i-1> <n> 1 <s> li <s> ri <s> di|2 <s> li <s> ri <s> mi", "<T_1>->1 <s> li <s> ri <s> di|2 <s> li <s> ri <s> mi"], "constraints": ["1<=n,m<=5000", "For ti=1: 1<=ti<=2", "1<=li<=ri<=n", "-10^4<=di<=10^4", "For ti=2: 1<=ti<=2", "1<=li<=ri<= n", "-5×10^7<=mi<=5×10^7"]}}
{"name": "385_A. Bear and Raspberry", "description": "Input\n\nThe first line contains two space-separated integers, n and c (2 <= n <= 100, 0 <= c <= 100), --- the number of days and the number of kilos of raspberry that the bear should give for borrowing the barrel.\n\nThe second line contains n space-separated integers x1, x2, ..., xn (0 <= xi <= 100), the price of a honey barrel on day i.", "grammar": {"productions": ["<S>->[n] <s> c <n> <T_n>", "<T_i>-><T_i-1> <s> [0-9]{1,3}", "<T_1>->[0-9]{1,3}"], "constraints": ["2<=n<=100", "0<=c<=100", "0<=xi<=100"]}}
{"name": "433_A. Kitahara Haruki's Gift", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 100) --- the number of apples. The second line contains n integers w1, w2, ..., wn (wi = 100 or wi = 200), where wi is the weight of the i-th apple.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> wi", "<T_1>->w1"], "constraints": ["1<=n<=100", "wi=100 or wi=200"]}}
{"name": "500_C. New Year Book Reading", "description": "Input\n\nThe first line contains two space-separated integers n (2 <= n <= 500) and m (1 <= m <= 1000) --- the number of books, and the number of days for which Jaehyun would read books.\n\nThe second line contains n space-separated integers w1, w2, ..., wn (1 <= wi <= 100) --- the weight of each book.\n\nThe third line contains m space separated integers b1, b2, ..., bm (1 <= bj <= n) --- the order of books that he would read. Note that he can read the same book more than once.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <s> w_i", "<T_1>->w_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["2<=n<=500", "1<=m<=1000", "1<=w_i<=100", "1<=b_i<=n"]}}
{"name": "526_A. King of Thieves", "description": "Input\n\nThe first line contains integer n (1 <= n <= 100) --- the number of segments on the level.\n\nNext line contains the scheme of the level represented as a string of n characters '*' and '.'.", "grammar": {"productions": ["<S>->[n] <n> [*.]{n}"], "constraints": ["1<=n<=100"]}}
{"name": "551_B. ZgukistringZ", "description": "Input\n\nThe first line contains string a, the second line contains string b, and the third line contains string c (1 <= |a|, |b|, |c| <= 105, where |s| denotes the length of string s).\n\nAll three strings consist only of lowercase English letters. \n\nIt is possible that b and c coincide.", "grammar": {"productions": ["<S>->a <n> b <n> c"], "constraints": ["1<=a<=105", "1<=b<=10^5", "1<=c<=10^5"]}}
{"name": "578_C. Weakness and Poorness", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 200 000), the length of a sequence.\n\nThe second line contains n integers a1, a2, ..., an (|ai| <= 10 000).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> ai", "<T_1>->a1"], "constraints": ["1<=n<=200000", "ai<=10000"]}}
{"name": "5_A. Chat Server's Outgoing Traffic", "description": "Input\n\nInput file will contain not more than 100 commands, each in its own line. No line will exceed 100 characters. Formats of the commands will be the following:\n\n  * +<name> for 'Add' command. \n  * -<name> for 'Remove' command. \n  * <sender_name>:<message_text> for 'Send' command. \n\n\n\n<name> and <sender_name> is a non-empty sequence of Latin letters and digits. <message_text> can contain letters, digits and spaces, but can't start or end with a space. <message_text> can be an empty line.\n\nIt is guaranteed, that input data are correct, i.e. there will be no 'Add' command if person with such a name is already in the chat, there will be no 'Remove' command if there is no person with such a name in the chat etc.\n\nAll names are case-sensitive.", "grammar": {"productions": [""], "constraints": ["1<=commands<=100"]}}
{"name": "621_D. Rat Kwesh and Cheese", "description": "Input\n\nThe only line of the input contains three space-separated real numbers x, y and z (0.1 <= x, y, z <= 200.0). Each of x, y and z is given with exactly one digit after the decimal point.", "grammar": {"productions": ["<S>->x <s> y <s> z"], "constraints": ["0.1<=x,y,z<=200.0"]}}
{"name": "643_B. Bear and Two Paths", "description": "Input\n\nThe first line of the input contains two integers n and k (4 <= n <= 1000, n - 1 <= k <= 2n - 2) --- the number of cities and the maximum allowed number of roads, respectively.\n\nThe second line contains four distinct integers a, b, c and d (1 <= a, b, c, d <= n).", "grammar": {"productions": ["<S>->n <s> k <n> a <s> b <s> c <s> d"], "constraints": ["4<=n<=1000", "n-1<=k<=2n-2", "1<=a,b,c,d<=n"]}}
{"name": "670_B. Game of Robots", "description": "Input\n\nThe first line contains two positive integers n and k (1 <= n <= 100 000, 1 <= k <= min(2\u00b7109, n\u00b7(n + 1) / 2).\n\nThe second line contains the sequence id1, id2, ..., idn (1 <= idi <= 109) --- identifiers of roborts. It is guaranteed that all identifiers are different.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> id_i", "<T_1>->id_1"], "constraints": ["1<=n<=100000", "1<=k<=min(2*10^9,n*(n+1)/2)", "1<=id_i<=10^9"]}}
{"name": "691_D. Swaps in Permutation", "description": "Input\n\nThe first line contains two integers n and m (1 <= n, m <= 106) --- the length of the permutation p and the number of pairs of positions.\n\nThe second line contains n distinct integers pi (1 <= pi <= n) --- the elements of the permutation p.\n\nEach of the last m lines contains two integers (aj, bj) (1 <= aj, bj <= n) --- the pairs of positions to swap. Note that you are given a positions, not the values to swap.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <s> pi", "<T_1>->pi", "<L_i>-><L_i-1> <n> aj <s> bj", "<L_1>->aj <s> bj"], "constraints": ["1<=n,m<=10^6", "1<=pi<=n", "1<=aj,bj<=n"]}}
{"name": "716_D. Complete The Graph", "description": "Input\n\nThe first line contains five integers n, m, L, s, t (2 <= n <= 1000, 1 <= m <= 10 000, 1 <= L <= 109, 0 <= s, t <= n - 1, s != t) --- the number of vertices, number of edges, the desired length of shortest path, starting vertex and ending vertex respectively.\n\nThen, m lines describing the edges of the graph follow. i-th of them contains three integers, ui, vi, wi (0 <= ui, vi <= n - 1, ui != vi, 0 <= wi <= 109). ui and vi denote the endpoints of the edge and wi denotes its weight. If wi is equal to 0 then the weight of the corresponding edge was erased.\n\nIt is guaranteed that there is at most one edge between any pair of vertices.", "grammar": {"productions": ["<S>->n <s> [m] <s> L <s> s <s> t <n> <T_m>", "<T_i>-><T_i-1> <n> ui <s> vi <s> wi", "<T_1>->ui <s> vi <s> wi"], "constraints": ["2<=n<=1000", "1<=m<=10000", "1<=L<=10^9", "0<=s,t<=n-1", "0<=ui,vi<=n-1", "0<=wi<=10^9"]}}
{"name": "737_A. Road to Cinema", "description": "Input\n\nThe first line contains four positive integers n, k, s and t (1 <= n <= 2\u00b7105, 1 <= k <= 2\u00b7105, 2 <= s <= 109, 1 <= t <= 2\u00b7109) --- the number of cars at the car rental service, the number of gas stations along the road, the length of the road and the time in which the film starts. \n\nEach of the next n lines contains two positive integers ci and vi (1 <= ci, vi <= 109) --- the price of the i-th car and its fuel tank capacity.\n\nThe next line contains k distinct integers g1, g2, ..., gk (1 <= gi <= s - 1) --- the positions of the gas stations on the road in arbitrary order.", "grammar": {"productions": ["<S>->[n] <s> [k] <s> s <s> t <n> <T_n> <n> [k] <s> <L_k>", "<T_i>-><T_i-1> <n> c_i <s> v_i", "<T_1>->c_1 <s> v_1", "<L_i>-><L_i-1> <s> g_i", "<L_1>->g_1"], "constraints": ["1<=n<=2*10^5", "1<=k<=2*10^5", "2<=s<=10^9", "1<=t<=2*10^9", "1<=c_i,v_i<=10^9", "1<=g_i<=s-1"]}}
{"name": "784_B. Kids' Riddle", "description": "Input\n\nThe input contains a single integer n (0 <= n <= 2000000000).", "grammar": {"productions": ["<S>->n"], "constraints": ["0<=n<=2000000000"]}}
{"name": "805_A. Fake NP", "description": "Input\n\nThe first line contains two integers l and r (2 <= l <= r <= 109).", "grammar": {"productions": ["<S>->l <s> r"], "constraints": ["2<=l<=r<=10^9"]}}
{"name": "830_A. Office Keys", "description": "Input\n\nThe first line contains three integers n, k and p (1 <= n <= 1 000, n <= k <= 2 000, 1 <= p <= 109) --- the number of people, the number of keys and the office location.\n\nThe second line contains n distinct integers a1, a2, ..., an (1 <= ai <= 109) --- positions in which people are located initially. The positions are given in arbitrary order.\n\nThe third line contains k distinct integers b1, b2, ..., bk (1 <= bj <= 109) --- positions of the keys. The positions are given in arbitrary order.\n\nNote that there can't be more than one person or more than one key in the same point. A person and a key can be located in the same point.", "grammar": {"productions": ["<S>->[n] <s> [k] <s> p <n> <T_n> <n> <L_k>", "<T_i>-><T_i-1> <s> a_i", "T_1>->a_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["1<=n<=1000", "n<=k<=2000", "1<=p<=10^9", "1<=a_i<=10^9", "1<=b_j<=10^9"]}}
{"name": "851_B. Arpa and an exam about geometry", "description": "Input\n\nThe only line contains six integers ax, ay, bx, by, cx, cy (|ax|, |ay|, |bx|, |by|, |cx|, |cy| <= 109). It's guaranteed that the points are distinct.", "grammar": {"productions": ["<S>->ax <s> ay <s> bx <s> by <s> cx <s> cy"], "constraints": ["ax,ay,bx,by,cx,cy<=10^9"]}}
{"name": "920_E. Connected Components?", "description": "Input\n\nThe first line contains two integers n and m (1 <= n <= 200000, <image>).\n\nThen m lines follow, each containing a pair of integers x and y (1 <= x, y <= n, x != y) denoting that there is no edge between x and y. Each pair is listed at most once; (x, y) and (y, x) are considered the same (so they are never listed in the same test). If some pair of vertices is not listed in the input, then there exists an edge between those vertices.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_m>", "<T_i>-><T_i-1> <n> x <s> y", "<T_1>->x <s> y"], "constraints": ["1<=n<=200000", "1<=m", "1<=x,y<=n", "x!=y"]}}
{"name": "949_C. Data Center Maintenance", "description": "Input\n\nThe first line of input contains three integers n, m and h (2 <= n <= 100 000, 1 <= m <= 100 000, 2 <= h <= 100 000), the number of company data centers, number of clients and the day length of day measured in hours. \n\nThe second line of input contains n integers u1, u2, ..., un (0 <= uj < h), j-th of these numbers is an index of a maintenance hour for data center j. \n\nEach of the next m lines contains two integers ci, 1 and ci, 2 (1 <= ci, 1, ci, 2 <= n, ci, 1 != ci, 2), defining the data center indices containing the data of client i.\n\nIt is guaranteed that the given maintenance schedule allows each client to access at least one copy of his data at any moment of day.", "grammar": {"productions": ["<S>->[n] <s> [m] <s> h <n> <T_n> <L_m>", "<T_i>-><T_i-1> <s> u_i", "<T_1>->u_1", "<L_i>-><L_i-1> <n> c_i,1 <s> c_i,2", "<L_1>->c_1,1 <s> c_1,2"], "constraints": ["2<=n<=100000", "1<=m<=100000", "2<=h<=100000", "0<=u_j<h", "1<=c_i,1,c_i,2<=n", "c_i,1!=c_i,2"]}}
{"name": "977_B. Two-gram", "description": "Input\n\nThe first line of the input contains integer number n (2 <= n <= 100) --- the length of string s. The second line of the input contains the string s consisting of n capital Latin letters.", "grammar": {"productions": ["<S>->[n] <n> [A-Z]{n}"], "constraints": ["2<=n<=100"]}}
{"name": "996_F. Game", "description": "Input\n\nThe first line contains two integers n and r (1 <= n <= 18, 0 <= r <= 2^{18}).\n\nThe next line contains 2^n integers c_0, c_1, ..., c_{2^n-1} (0 <= c_i <= 10^9), denoting the initial values of f. More specifically, f(x_0, x_1, ..., x_{n-1}) = c_x, if x = \\overline{x_{n-1} ... x_0} in binary.\n\nEach of the next r lines contains two integers z and g (0 <= z <= 2^n - 1, 0 <= g <= 10^9). If z = \\overline{z_{n-1} ... z_0} in binary, then this means to set f(z_0, ..., z_{n-1}) -> g.", "grammar": {"productions": ["<S>->[n] <s> [r] <n> <T_n> <n> <L_r>", "<T_i>-><T_i-1> <s> c_i", "<T_1>->c_1", "<L_j>-><L_j-1> <n> z_j <s> g_j", "<L_1>->z_1 <s> g_1"], "constraints": ["1<=n<=18", "0<=r<=2^18", "0<=c_i<=10^9", "0<=z<=2^n-1", "0<=g<=10^9"]}}
{"name": "p02652 AtCoder Grand Contest 045 - 01 Unbalanced", "description": "Constraints\n\n* 1 <= |S| <= 10^6\n* Each character of S is `0`, `1`, or `?`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[01?]{1,10^6}"], "constraints": [""]}}
{"name": "p03343 AtCoder Regular Contest 098 - Range Minimum Queries", "description": "Constraints\n\n* 1 <= N <= 2000\n* 1 <= K <= N\n* 1 <= Q <= N-K+1\n* 1 <= A_i <= 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K Q\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <s> K <s> Q <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_i"], "constraints": ["1<=N<=2000", "1<=K<=N", "1<=Q<=N-K+1", "1<=A_i<=10^9"]}}
{"name": "p03664 AtCoder Regular Contest 078 - Mole and Abandoned Mine", "description": "Constraints\n\n* 2 <= N <= 15\n* N-1 <= M <= N(N-1)/2\n* 1 <= a_i, b_i <= N\n* 1 <= c_i <= 10^{6}\n* There are neither multiple edges nor self-loops in the given graph.\n* The given graph is connected.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\na_1 b_1 c_1\n:\na_M b_M c_M", "grammar": {"productions": ["<S>->[N] <s> M <n> <T_M>", "<T_i>-><T_i-1> <n> a_i <s> b_i <s> c_i", "<T_1>->a_1 <s> b_1 <s> c_1"], "constraints": ["2<=N<=15", "N-1<=M<=N(N-1)/2", "1<=a_i,b_i<=N", "1<=c_i<=10^6"]}}
{"name": "p03819 AtCoder Regular Contest 068 - Snuke Line", "description": "Constraints\n\n* 1 <= N <= 3 \u00d7 10^{5}\n* 1 <= M <= 10^{5}\n* 1 <= l_i <= r_i <= M\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN M\nl_1 r_1\n:\nl_{N} r_{N}", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> l_i <s> r_i", "<T_1>->l_1 <s> r_1"], "constraints": ["1<=N<=3*10^5", "1<=M<=10^5", "1<=l_i<=r_i<=M"]}}
{"name": "p00074 Videotape", "description": "input\n\nGiven multiple datasets. Each dataset is as follows.\n\n\nT H S\n\n\nT, H, and S are integers that represent hours, minutes, and seconds, respectively.\n\nInput ends when T, H, and S are all -1. The number of datasets does not exceed 50.", "grammar": {"productions": ["<S>->[d] <n> <T_d>", "<T_i>-><T_i-1> <n> T <s> H <s> S", "<T_1>->T <s> H <s> S"], "constraints": ["1<=d<=50", "T,H,S are integers."]}}
{"name": "p00206 Next Trip", "description": "Input\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by a single line of zeros. Each dataset is given in the following format:\n\n\nL\nM1 N1\nM2 N2\n::\nM12 N12\n\n\nThe first line gives the travel cost L (1 <= L <= 1000000, integer). The next 12 lines are given the balance information for the i month, Mi, Ni (0 <= Mi, Ni <= 100000, Ni <= Mi, integer).\n\nThe number of datasets does not exceed 1000.", "grammar": {"productions": ["<S>->[L] <n> <T_12>", "<T_i>-><T_i-1> <n> M_i <s> N_i", "<T_1>->M_1 <s> N_1"], "constraints": ["1<=L<=1000000", "0<=M_i,N_i<=100000", "N_i<=M_i"]}}
{"name": "p00365 Age Difference", "description": "Input\n\nThe input is given in the following format.\n\n\ny_1 m_1 d_1\ny_2 m_2 d_2\n\n\nThe first and second lines provide Hatsumi's and Taku's birthdays respectively in year y_i (1 <= y_i <= 3000), month m_i (1 <= m_i <= 12), and day d_i (1 <= d_i <= Dmax) format. Where Dmax is given as follows:\n\n* 28 when February in a non-leap year\n* 29 when February in a leap-year\n* 30 in April, June, September, and November\n* 31 otherwise.\n\n\n\nIt is a leap year if the year represented as a four-digit number is divisible by 4. Note, however, that it is a non-leap year if divisible by 100, and a leap year if divisible by 400.", "grammar": {"productions": ["<S>->y_1 <s> m_1 <s> d_1 <n> y_2 <s> m_2 <s> d_2"], "constraints": ["1<=y_i<=3000", "1<=m_i<=12", "1<=d_i<=Dmax"]}}
{"name": "p00720 Earth Observation with a Mobile Robot Team", "description": "Input\n\nThe input consists of multiple datasets, each in the following format.\n\n> N T R\n>  nickname and travel route of the first robot\n>  nickname and travel route of the second robot\n>  ...\n>  nickname and travel route of the N-th robot\n>\n\nThe first line contains three integers N, T, and R that are the number of robots, the length of the simulation period, and the maximum distance wireless signals can reach, respectively, and satisfy that 1 <=N <= 100, 1 <= T <= 1000, and 1 <= R <= 10.\n\nThe nickname and travel route of each robot are given in the following format.\n\n> nickname\n>  t0 x0 y0\n>  t1 vx1 vy1\n>  t2 vx2 vy2\n>  ...\n>  tk vxk vyk\n>\n\nNickname is a character string of length between one and eight that only contains lowercase letters. No two robots in a dataset may have the same nickname. Each of the lines following nickname contains three integers, satisfying the following conditions.\n\n> 0 = t0 < t1 < ... < tk = T\n>  -10 <= vx1, vy1, ..., vxk, vyk<= 10\n>\n\nA robot moves around on a two dimensional plane. (x0, y0) is the location of the robot at time 0. From time ti-1 to ti (0 < i <= k), the velocities in the x and y directions are vxi and vyi, respectively. Therefore, the travel route of a robot is piecewise linear. Note that it may self-overlap or self-intersect.\n\nYou may assume that each dataset satisfies the following conditions.\n\n* The distance between any two robots at time 0 is not exactly R.\n* The x- and y-coordinates of each robot are always between -500 and 500, inclusive.\n* Once any robot approaches within R + 10-6 of any other, the distance between them will become smaller than R - 10-6 while maintaining the velocities.\n* Once any robot moves away up to R - 10-6 of any other, the distance between them will become larger than R + 10-6 while maintaining the velocities.\n* If any pair of robots mutually enter the wireless area of the opposite ones at time t and any pair, which may share one or two members with the aforementioned pair, mutually leave the wireless area of the opposite ones at time t', the difference between t and t' is no smaller than 10-6 time unit, that is, |t - t' | >= 10-6.\n\n\nA dataset may include two or more robots that share the same location at the same time. However, you should still consider that they can move with the designated velocities.\n\nThe end of the input is indicated by a line containing three zeros.", "grammar": {"productions": ["<S>->[N] <s> T <s> R <n> <T_N> 0 <s> 0 <s> 0", "<T_i>-><T_i-1> <n> [a-z]{1,8} <n> <L_k>", "<T_1>->[a-z]{1,8} <n> <L_k>", "<L_i>-><L_i-1> <n> t <s> vx <s> vy", "<L_1>->t <s> vx <s> vy"], "constraints": ["1<=N<=100", "1<=T<=1000", "1<=R<=10", "0<=t<=T", "-10<=vx,vy<=10"]}}
{"name": "p00991 Grid", "description": "Input\n\nThe input is given in the following format.\n\n\nr c a1 a2 b1 b2\n\n\nInput meets the following constraints\n1 <= r, c <= 1,000\n0 <= a1, b1 <r\n0 <= a2, b2 <c", "grammar": {"productions": ["<S>->[r] <s> [c] <s> a1 <s> a2 <s> b1 <s> b2"], "constraints": ["1<=r,c<=1000", "0<=a1,b1<r", "0<=a2,b2<c"]}}
{"name": "p02298 Is-Convex", "description": "Constraints\n\n* 3 <= n <= 100\n* -10000 <= xi, yi <= 10000\n* No point of the polygon will occur more than once.\n* Two sides of the polygon can intersect only at a common endpoint.\n\nInput\n\ng is given by coordinates of the points p1,..., pn in the following format:\n\n\nn\nx1 y1\nx2 y2\n:\nxn yn\n\n\nThe first integer n is the number of points. The coordinate of a point pi is given by two integers xi and yi. The coordinates of points are given in the order of counter-clockwise visit of them.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> xi <s> yi", "<T_1>->xi <s> yi"], "constraints": ["3<=n<=100", "-10000<=xi,yi<=10000"]}}
{"name": "p02445 Swap", "description": "Constraints\n\n* $1 <= n <= 1,000$\n* $-1,000,000,000 <= a_i <= 1,000,000,000$\n* $1 <= q <= 1,000$\n* $0 <= b_i < e_i <= n$\n* $0 <= t_i < t_i + (e_i - b_i) <= n$\n* Given swap ranges do not overlap each other\n\nInput\n\nThe input is given in the following format.\n\n\n$n$\n$a_0 \\; a_1 \\; ...,\\; a_{n-1}$\n$q$\n$b_1 \\; e_1 \\; t_1$\n$b_2 \\; e_2 \\; t_2$\n:\n$b_{q} \\; e_{q} \\; t_{q}$\n\n\nIn the first line, $n$ (the number of elements in $A$) is given. In the second line, $a_i$ (each element in $A$) are given. In the third line, the number of queries $q$ is given and each query is given by three integers $b_i \\; e_i \\; t_i$ in the following $q$ lines.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> [q] <n> <L_q>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <n> b_i <s> e_i <s> t_i", "<L_1>->b_1 <s> e_1 <s> t_1"], "constraints": ["1<=n<=1000", "-1000000000<=a_i<=1000000000", "1<=q<=1000", "0<=b_i<e_i<=n", "0<=t_i<t_i+(e_i-b_i)<=n"]}}
{"name": "1012_B. Chemical table", "description": "Input\n\nThe first line contains three integers n, m, q (1 <= n, m <= 200 000; 0 <= q <= min(n\u00b7m, 200 000)), the chemical table dimensions and the number of elements scientists already have.\n\nThe following q lines contain two integers ri, ci (1 <= ri <= n, 1 <= ci <= m), each describes an element that scientists already have. All elements in the input are different.", "grammar": {"productions": ["<S>->[n] <s> [m] <s> [q] <n> <T_q>", "<T_i>-><T_i-1> <n> ri <s> ci", "<T_1>->ri <s> ci"], "constraints": ["1<=n,m<=200000", "0<=q<=min(n*m, 200000)", "1<=ri<=n", "1<=ci<=m"]}}